/**
 * Project 2
 * LC-2K Linker
 */

#include <stdbool.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAXSIZE 500
#define MAXLINELENGTH 1000
#define MAXFILES 6

typedef struct FileData FileData;
typedef struct SymbolTableEntry SymbolTableEntry;
typedef struct RelocationTableEntry RelocationTableEntry;
typedef struct CombinedFiles CombinedFiles;

struct SymbolTableEntry {
	char label[7];
	char location;
	unsigned int offset;
};

struct RelocationTableEntry {
	unsigned int offset;
	char inst[7];
	char label[7];
	unsigned int file;
};

struct FileData {
	unsigned int textSize;
	unsigned int dataSize;
	unsigned int symbolTableSize;
	unsigned int relocationTableSize;
	unsigned int textStartingLine; // in final executable
	unsigned int dataStartingLine; // in final executable
	int text[MAXSIZE];
	int data[MAXSIZE];
	SymbolTableEntry symbolTable[MAXSIZE];
	RelocationTableEntry relocTable[MAXSIZE];
};

struct CombinedFiles {
	unsigned int textSize;
	unsigned int dataSize;
	unsigned int symbolTableSize;
	unsigned int relocationTableSize;
	int text[MAXSIZE*MAXFILES];
	int data[MAXSIZE*MAXFILES];
	SymbolTableEntry symbolTable[MAXSIZE*MAXFILES];
	RelocationTableEntry relocTable[MAXSIZE*MAXFILES];
};

// int get_local_index(struct CombinedFiles combined, ){

// }

// int relocate(int val, int n){

// 	int mask = 0b1111111110000000000000000;
// 	val = val & mask;
// 	val = val | n;
// 	return val;

// }

int main(int argc, char *argv[])
{
	char *inFileString, *outFileString;
	FILE *inFilePtr, *outFilePtr; 
	unsigned int i, j;

	if (argc <= 2) {
		printf("error: usage: %s <obj file> ... <output-exe-file>\n",
				argv[0]);
		exit(1);
	}

	outFileString = argv[argc - 1];

	outFilePtr = fopen(outFileString, "w");
	if (outFilePtr == NULL) {
		printf("error in opening %s\n", outFileString);
		exit(1);
	}

	FileData files[MAXFILES];

  // read in all files and combine into a "master" file
	for (i = 0; i < argc - 2; i++) {
		inFileString = argv[i+1];

		inFilePtr = fopen(inFileString, "r");
		printf("opening %s\n", inFileString);

		if (inFilePtr == NULL) {
			printf("error in opening %s\n", inFileString);
			exit(1);
		}

		char line[MAXLINELENGTH];
		unsigned int textSize, dataSize, symbolTableSize, relocationTableSize;

		// parse first line of file
		fgets(line, MAXSIZE, inFilePtr);
		sscanf(line, "%d %d %d %d",
				&textSize, &dataSize, &symbolTableSize, &relocationTableSize);

		files[i].textSize = textSize;
		files[i].dataSize = dataSize;
		files[i].symbolTableSize = symbolTableSize;
		files[i].relocationTableSize = relocationTableSize;

		// read in text section
		int instr;
		for (j = 0; j < textSize; j++) {
			fgets(line, MAXLINELENGTH, inFilePtr);
			instr = strtol(line, NULL, 0);
			files[i].text[j] = instr;
		}

		// read in data section
		int data;
		for (j = 0; j < dataSize; j++) {
			fgets(line, MAXLINELENGTH, inFilePtr);
			data = strtol(line, NULL, 0);
			files[i].data[j] = data;
		}

		// read in the symbol table
		char label[7];
		char type;
		unsigned int addr;
		for (j = 0; j < symbolTableSize; j++) {
			fgets(line, MAXLINELENGTH, inFilePtr);
			sscanf(line, "%s %c %d",
					label, &type, &addr);
			files[i].symbolTable[j].offset = addr;
			strcpy(files[i].symbolTable[j].label, label);
			files[i].symbolTable[j].location = type;
		}

		// read in relocation table
		char opcode[7];
		for (j = 0; j < relocationTableSize; j++) {
			fgets(line, MAXLINELENGTH, inFilePtr);
			sscanf(line, "%d %s %s",
					&addr, opcode, label);
			files[i].relocTable[j].offset = addr;
			strcpy(files[i].relocTable[j].inst, opcode);
			strcpy(files[i].relocTable[j].label, label);
			files[i].relocTable[j].file	= i;
		}
		fclose(inFilePtr);
	} // end reading files


	// *** INSERT YOUR CODE BELOW ***
	//    Happy coding!!!


	// for (unsigned int i = 0; i < argc - 2; ++i){
	// 	for (unsigned int j = 0; j < files[i].relocationTableSize; ++j){
	// 		if (!strcmp(files[i].relocTable[j].inst, "lw")){
	// 			files[i].data[files[i].relocTable[j].offset] = relocate(files[i].data[files[i].relocTable[j].offset], )
	// 		}
	// 	}
	// }

	// initialize CombinedFiles struct to contain the combined but not updated elements of each object file
	
	// CombinedFiles complete;

	// complete.textSize = 0;
	// complete.dataSize = 0;
	// complete.relocationTableSize = 0;
	// complete.symbolTableSize = 0;
	unsigned int line = 0;


	// update where the files begin and end in reference to the final linker file
	for (unsigned int i = 0; i < argc - 2; ++i){
		files[i].textStartingLine = line;
		line += files[i].textSize;
	}


	for (unsigned int i = 0; i < argc - 2; ++i){
		files[i].dataStartingLine = line;
		line += files[i].dataSize;
	}


	// for (unsigned int i = 0; i < argc - 2; ++i){

	// 	for (unsigned int j = 0; j < files[i].textSize; ++j){
	// 		complete.text[complete.textSize + j] = files[i].text[j];
	// 		complete.text[complete.textSize + j] = files[i].text[j];
	// 	}
		
	// 	for (unsigned int j = 0; j < files[i].dataSize; ++j){
	// 		complete.data[complete.dataSize + j] = files[i].data[j];
	// 	}

	// 	for (unsigned int j = 0; j < files[i].symbolTableSize; ++j){
	// 		complete.symbolTable[complete.symbolTableSize + j] = files[i].symbolTable[j];
	// 	}


	// 	// edit the offsets here
	// 	for (unsigned int j = 0; j < files[i].relocationTableSize; ++j){
	// 		complete.relocTable[complete.relocationTableSize + j] = files[i].relocTable[j];
	// 	}

		



	// 	complete.textSize += files[i].textSize;
	// 	complete.dataSize += files[i].dataSize;
	// 	complete.relocationTableSize += files[i].relocationTableSize;
	// 	complete.symbolTableSize += files[i].symbolTableSize;


	// }



	// loop through the relocation tables

	// for (unsigned int i = 0; i < argc - 2; ++i){
	// 	for (unsigned int j = 0; j < files[i].relocationTableSize; ++j){
	// 		// if it is not stack
	// 		if (!strcmp(files[i].relocTable[j].inst, "lw")){
				
	// 			// find from symbol table
	// 			// for (int k = 0; k < complete.symbolTableSize; ++k){
	// 			// 	if (complete.symbolTable[k].label == files[i].relocTable[j])
	// 			// }

	// 			if (!isupper(files[i].relocTable[j].label)){

	// 				files[i].text[files[i].relocTable[j].offset] += complete.textSize + files[i].relocTable[j].offset;

	// 			}

	// 	}
	// }
	// }

	for (unsigned int i = 0; i < complete.relocationTableSize; ++i){
		if (!strcmp(complete.relocTable[i].inst, "lw")){

			// find offset
			// int off = 0;
			// for (int j = 0; j <= complete.relocTable[i].file; ++j){
			// 	off += 
			// }

			files[complete.relocTable[i].file].text[complete.relocTable[i].offset] +=  complete.dataSize;



		}
	}




	// find data size




} // main

